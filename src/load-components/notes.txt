Return table with proxies:
  .reactor: proxy,
  .turbines: {proxy1, proxy2, ...},
  .steam: {{proxy1, side1, index1}, ...},
  .water: {{proxy1, side1, index1}, ...},
  .pumps: {{proxy1, side1}, ...}
The data is saved in a configuration file in the following format:
  .reactor: addr,
  .turbines: {addr1, addr2, ...},
  .steam: {{addr1, side1, index1}, ...},
  .water: {{addr1, side1, index1}, ...},
  .pumps: {{addr1, side1}, ...}
If the configuration file does not exist, create new one:
  If there is more than one reactor or turbine, ask the user, which reactor
    to choose and how many turbines to choose and how to arrange them
  Try to recognize the fluid tanks based on their contents, but if it fails,
    ask the user
  Let the user select, which redstone block(s) and which side(s) operates
    the pumps and which polarity is which
Recognition of components:
  Reactor, turbines: active/inactive (must be done safely)
  Fluid tanks: fluid type and amount / change in amount
  Redstone block: current input / change in input / test output